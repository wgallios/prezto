#
# Executes commands at the start of an interactive session.
#
# Authors:
#   Sorin Ionescu <sorin.ionescu@gmail.com>
#

# Source Prezto.
if [[ -s "${ZDOTDIR:-$HOME}/.zprezto/init.zsh" ]]; then
  source "${ZDOTDIR:-$HOME}/.zprezto/init.zsh"
fi

# present working directory
DIR=$(dirname $0:A)
# export RBENV_ROOT=/usr/local/share/rbenv

export NO_AT_BRIDGE=1

export AWESOME_THEMES_PATH=/usr/local/share/awesome/themes

export XDG_CONFIG_HOME="${XDG_CONFIG_HOME}/.awesome:${XDG_CONFIG_HOME}"

export _JAVA_OPTIONS="-Dawt.useSystemAAFontSettings=on -Dswing.defaultlaf=com.sun.java.swing.plaf.gtk.GTKLookAndFeel"

setopt AUTO_CD
setopt MULTIOS

# If we have a glob this will expand it
setopt GLOB_COMPLETE
setopt PUSHD_MINUS

# This makes cd=pushd
setopt AUTO_PUSHD
#
# # This will use named dirs when possible
setopt AUTO_NAME_DIRS

# Who doesn't want home and end to work?
bindkey '\e[1~' beginning-of-line
bindkey '\e[4~' end-of-line
#
# # Incremental search is elite!
bindkey -M vicmd "/" history-incremental-search-backward
bindkey -M vicmd "?" history-incremental-search-forward
#
# # Search based on what you typed in already
bindkey -M vicmd "//" history-beginning-search-backward
bindkey -M vicmd "??" history-beginning-search-forward


# oh wow!  This is killer...  try it!
bindkey -M vicmd "q" push-line
#
# # it's like, space AND completion.  Gnarlbot.
bindkey -M vicmd ' ' magic-space

bindkey -M vicmd '^L' forward-word
bindkey -M vicmd '^H' backward-word

alias transmission='transmission-cli'

alias up='cd ..'
alias back='cd -'

if command -v eza > /dev/null 2>&1; then
    alias l='eza -alhg'
    alias lsd='eza -alhgd'
    alias ls='eza'
else
    alias l='ls -alh'
    alias lsd='/usr/bin/lsd -alhd */'
fi

# if command -v exa > /dev/null 2>&1; then
#     alias l='exa -alhg'
#     alias lsd='exa -alhgd'
#     alias ls='exa'
# else
#     alias l='ls -alh'
#     alias lsd='/usr/bin/lsd -alhd */'
# fi
#

# alias l='ls -alh'
# alias lsd='/usr/bin/lsd -alhd */'
alias g='git'
alias glog="git log --graph --pretty=format:'%Cred%h%Creset -%C(yellow)%d%Creset %s %Cgreen(%cr) %C(bold blue)<%an>%Creset' --abbrev-commit;"
alias gr='grunt'
alias grwatch='grunt watch &'
alias grstop='pkill grunt'
alias rm='rm -i'
alias waf='wafw00f -a'

alias log='multitail -f'
alias logc='multitail -Cs -f'

alias cdv='cd /var/www'

alias 256colors="~/zshrc/256-xterm-colors"
# alias bat='upower -i /org/freedesktop/UPower/devices/battery_BAT0| grep -E "state|to\ full|percentage"'

# tmux aliases
alias t='tmux -2'
alias tlist='tmux list-sessions'
alias tdetach='tmux detach -a'

alias ettercap='ettercap -C'

alias grebase='mv .git ../.git.bak && trash * && trash .* && mv ../.git.bak .git && git reset --hard'

# record audio from mic -- just incase
alias rec='arecord -f cd -t raw | oggenc - -r -o record.ogg'

alias sqlm='python /usr/local/share/sqlmap/sqlmap.py --answers "further processing=Y,password hashes=N"'

alias wpscan='ruby /usr/local/share/wpscan/wpscan.rb'

alias upgrade='sudo apt-get update && sudo apt-get -y upgrade && sudo apt-get -y dist-upgrade && sudo apt-get -y autoremove && sudo apt-get -y autoclean'
alias '~?'='~/' 

alias ehash='exec $SHELL'
alias eshell='exec $SHELL'


# shortens ack-grep to ack when applicable
# if [[ $(which ack-grep) ]]; then
if command -v ack-grep > /dev/null 2>&1; then
    alias ack='ack-grep'
fi

# if [[ $(which systemctl) ]]; then
if command -v systemctl > /dev/null 2>&1; then
    alias ctl='systemctl'
fi

alias nautilus='nautilus --no-desktop'

# if [[ $(which exiqgrep) ]]; then
if command -v exiqgrep > /dev/null 2>&1; then
    alias eximfrozen='exiqgrep -z -i | xargs exim -Mrm'
fi

source ~/.zshenv

if [[ -r /usr/bin/aurman ]]; then
    alias aur='aurman --noedit --noconfirm'
    # alias aurman="$(which aurman) --noedit --noconfirm"
    # alias aur="$(which aurman) --noedit --noconfirm"
fi

if [[ -r ~/.local/bin/man ]]; then
    alias man='~/./.local/bin/man'
fi

if [[ -r ~/.local/bin/sc ]]; then
    alias sc='~/./.local/bin/sc'
fi

if [[ -r /sbin/ifconfig ]]; then
    alias ifconfig='/./sbin/ifconfig'
fi


if [[ -r /sbin/iwconfig ]]; then
    alias iwconfig='/./sbin/iwconfig'
fi

if [[ -d ~/src/blueborne ]]; then
    export PYTHONPATH=$PYTHONPATH:~/src/blueborne
fi

if [[ -r /usr/bin/bat ]]; then
    alias cat='bat'
    alias less='bat'
fi

if [[ -r /usr/bin/pydf ]]; then
    alias df='pydf'
fi

alias udevreload='udevadm control --reload-rules && udevadm trigger'

for keymap in 'emacs' 'viins' 'vicmd'; do
    #[Ctrl-RightArrow] - move forward one word
    bindkey -M $keymap '^L' forward-word
    # [Ctrl-LeftArrow] - move backward one word
    bindkey -M $keymap '^H' backward-word
done

unset keymap

# key bindings
bindkey "e[1~" beginning-of-line
bindkey "e[4~" end-of-line
bindkey "e[5~" beginning-of-history
bindkey "e[6~" end-of-history
bindkey "e[3~" delete-char
bindkey "e[2~" quoted-insert
bindkey "e[5C" forward-word
bindkey "eOc" emacs-forward-word
bindkey "e[5D" backward-word
bindkey "eOd" emacs-backward-word
bindkey "ee[C" forward-word
bindkey "ee[D" backward-word
bindkey "^H" backward-delete-word
# for rxvt
bindkey "e[8~" end-of-line
bindkey "e[7~" beginning-of-line
# for non RH/Debian xterm, can't hurt for RH/DEbian xterm
bindkey "eOH" beginning-of-line
bindkey "eOF" end-of-line
# for freebsd console
bindkey "e[H" beginning-of-line
bindkey "e[F" end-of-line
# completion in the middle of a line
bindkey '^i' expand-or-complete-prefix



for keymap in 'emacs' 'viins' 'vicmd'; do
    bindkey -M $keymap "^[[1;2C" forward-word
    bindkey -M $keymap "^[[1;2D" backward-word
done

insert_sudo () {
    # zle beginning-of-line; zle -U "sudo "; zle end-of-line
    prefix="sudo"
    BUFFER="$prefix $BUFFER"
    CURSOR=$(($CURSOR + $#prefix + 1))
}

zle -N insert-sudo insert_sudo
bindkey "^[^[" insert-sudo


alias md5ls='f(){ find $1 -maxdepth 1 -type f -exec md5sum "{}" +};f'
alias md5diff='f(){ vimdiff <(md5ls $1) <(md5ls $2) };f'

alias urxvtconf='urxvt --help 2>&1| sed -n ''/: /s/^ */! URxvt*/gp'''

alias tail='/./usr/bin/tail -n100'
alias tailf='tail -n100 -f'
alias hollywood='hollywood --nosound'

alias google-chrome='google-chrome-stable'


uploadSSHKeyfn () {
    local port=22
    local USERNAME=$(whoami)
    if [[ ! -z $2 ]]; then
        port=$2
    fi

    if [[ -z $1 || $port -le 0 || $port -gt 65535 ]]; then
        echo "usage: uploadSSHKey [username@]host [port]\nExample: uploadSSHKey $USERNAME@localhost 2222";
        return 1
    fi


    if [[ -f ~/.ssh/id_rsa.pub ]]; then
        echo "Uploading id_rsa.pub ssh key to $1:$port...."
        if cat ~/.ssh/id_rsa.pub | ssh $1 -p $port "mkdir -p ~/.ssh && chmod 700 ~/.ssh && cat >> ~/.ssh/authorized_keys"; then
            echo "Success";
            return 0;
        else
            echo "FAILED";
            return 1;
        fi
    fi

    if [[ -f ~/.ssh/id_ed25519.pub ]]; then
        echo "Uploading id_ed25519.pub ssh key to $1:$port...."
        if cat ~/.ssh/id_ed25519.pub | ssh $1 -p $port "mkdir -p ~/.ssh && chmod 700 ~/.ssh && cat >> ~/.ssh/authorized_keys"; then
            echo "Success";
            return 0;
        else
            echo "FAILED";
            return 1;
        fi
    fi
}

alias uploadSSHKey="uploadSSHKeyfn"


_generateSSHkeyfn () {
    local USERNAME=$(whoami)
    local HOSTNAME=$(cat /etc/hostname)
    local EMAIL="$USERNAME@$HOSTNAME"
    # local HOSTNAME=$(hostname)

    if [[ -z $1 ]]; then
        read "email?E-mail address: "

        if ! [[ -z "$email" ]]; then
            EMAIL="$email"
        fi
    fi



    local DEFKEYPATH="$HOME/.ssh/id_rsa"
    
    if [[ -z $EMAIL ]]; then
        printf "usage: generateSSHkey [%s [%s]]" "$EMAIL" "$DEFKEYPATH";
        read "USEDEF?Use $EMAIL as email address?"

        if ! [[ "$USEDEF" =~ ^[Yy]$ ]] then
            echo "FAILED";
            return 1;
        fi
    else
        EMAIL=$1
    fi

    if ! [[ -z $2 ]]; then
        DEFKEYPATH="$2"
    fi


    if ! [[ -d  "$HOME/.ssh" ]]; then
        printf "creating $HOME/.ssh folder...";
        if mkdir -p "$HOME/.ssh"; then
            printf "SUCCESS\n";
        else
            printf "FAIL\n";
        fi
    fi

    printf "generating key..."
    if ssh-keygen -t rsa -b 4096 -C "$EMAIL" -f "$DEFKEYPATH" -q -N ""; then
        eval "$(ssh-agent -s)"
        ssh-add $DEFKEYPATH
        printf "SUCCESS\n";
        return 0;
    else
        printf "FAILED\n";
        return 1;
    fi

}

alias generateSSHkey="_generateSSHkeyfn"

alias rsyncssh="rsyncsshfn"

rsyncsshfn () {

    if [[ -z $1 || -z $2 ]]; then
        echo "usage: rsyncssh [SRC] [DESTINATION]"
        return 1;
    fi

    rsync -avz -e "ssh -o StrictHostKeyChecking=no -o UserKnownHostsFile=/dev/null" --progress $1 $2;
    return 0;
}

if [ -r /usr/share/zsh/plugins/zsh-autosuggestions/zsh-autosuggestions.zsh ]; then
    source /usr/share/zsh/plugins/zsh-autosuggestions/zsh-autosuggestions.zsh
fi

srvCmdfn () {
    systemctl $2 $1;
}

alias service="srvCmdfn"


if [ -r /usr/share/doc/git-extras/git-extras-completion.zsh ]; then
    source /usr/share/doc/git-extras/git-extras-completion.zsh
fi

source /etc/profile

export PATH="$HOME/.yarn/bin:$HOME/.config/yarn/global/node_modules/.bin:$HOME/.local/bin:$PATH"

pip()
{

  if [[ $1 == "search" ]]; then

    command pip_search "${@:2}" | more;

  else

    command pip "$@";

  fi

}

export NVM_DIR="$HOME/.config/nvm"
[ -s "$NVM_DIR/nvm.sh" ] && \. "$NVM_DIR/nvm.sh"  # This loads nvm
[ -s "$NVM_DIR/bash_completion" ] && \. "$NVM_DIR/bash_completion"  # This loads nvm bash_completion

export ANDROID_HOME="$HOME/Android/Sdk"
export PATH="$PATH:$ANDROID_HOME/emulator:$ANDROID_HOME/platform-tools"
